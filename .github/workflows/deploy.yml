name: Deploy Django Application with Docker and PostgreSQL to DigitalOcean

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest  # Use a Linux runner

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r docker/requirements.txt

      # Step 4: Build and start Docker containers
      - name: Build Docker images and start containers
        run: |
          docker compose up -d --build  # Build and start the containers

      # Step 5: Set up SSH to connect to DigitalOcean Droplet
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}

      # Step 6: Save Docker images as tarballs
      - name: Save Docker images as tarballs
        run: |
          docker save ready_to_connect-backend:latest | bzip2 > backend.tar.bz2
          docker save postgres:17 | bzip2 > postgres.tar.bz2
          ls -al  # Verify tarballs are created

      # Step 7: Transfer Docker images to DigitalOcean Droplet
      - name: Transfer Docker images to DigitalOcean Droplet
        run: |
          scp -o StrictHostKeyChecking=no backend.tar.bz2 root@159.89.44.197:/root/tmp/
          scp -o StrictHostKeyChecking=no postgres.tar.bz2 root@159.89.44.197:/root/tmp/
          cd ready_to_connect
          scp -o StrictHostKeyChecking=no docker-compose-deploy.yml root@159.89.44.197:/root/tmp/

      # Step 8: Load Docker images on DigitalOcean Droplet
      - name: Load Docker images on DigitalOcean Droplet
        run: |
          ssh -o StrictHostKeyChecking=no root@159.89.44.197 << 'EOF'
            mv /root/tmp/backend.tar.bz2 /root/code/
            mv /root/tmp/postgres.tar.bz2 /root/code/
            mv /root/tmp/docker-compose-deploy.yml /root/code/docker-compose.yml
            docker load < /root/code/backend.tar.bz2
            docker load < /root/code/postgres.tar.bz2
          EOF

      # Step 9: Start Docker containers on DigitalOcean Droplet
      - name: Start Docker containers on DigitalOcean Droplet
        run: |
          ssh -o StrictHostKeyChecking=no root@159.89.44.197 << 'EOF'
            cd /root/code  # Navigate to the correct directory
            docker compose down  # Stop existing containers
            docker compose up -d  # Start containers in detached mode
          EOF
